9)	"Write a program to simulate CPU Scheduling Algorithms: FCFS and Round Robin.
	Process    AT                 BT
	P1             10                  2
	P2             0                    10
	P3             8                    4
	P4             5                    5
	"


package SPOSpkg;


import java.util.Scanner;
class FCFS
{
    public void fsfc()
    {
        Scanner sc = new Scanner(System.in);
        System.out.println("enter no of process: ");
        int n = sc.nextInt();
        int pid[] = new int[n]; // process ids
        int ar[] = new int[n]; // arrival times
        int bt[] = new int[n]; // burst or execution times
        int ct[] = new int[n]; // completion times
        int ta[] = new int[n]; // turn around times
        int wt[] = new int[n]; // waiting times
        int temp;
        float avgwt=0,avgta=0;
        for(int i = 0; i < n; i++)
        {
            System.out.println("enter process " + (i+1) + " arrival time: ");
            ar[i] = sc.nextInt();
            System.out.println("enter process " + (i+1) + " brust time: ");
            bt[i] = sc.nextInt();
            pid[i] = i+1;
        }
        //sorting according to arrival times
        for(int i = 0 ; i <n; i++)
        {
            for(int j=0; j < n-(i+1) ; j++)
            {
                if( ar[j] > ar[j+1] )
                {
                    temp = ar[j];
                    ar[j] = ar[j+1];
                    ar[j+1] = temp;
                    temp = bt[j];
                    bt[j] = bt[j+1];
                    bt[j+1] = temp;
                    temp = pid[j];
                    pid[j] = pid[j+1];
                    pid[j+1] = temp;
                }
            }
        }
        // finding completion times
        for(int i = 0 ; i < n; i++)
        {
            if( i == 0)
            {
                ct[i] = ar[i] + bt[i];
            }
            else
            {
                if( ar[i] > ct[i-1])
                {
                    ct[i] = ar[i] + bt[i];
                }
                else
                    ct[i] = ct[i-1] + bt[i];
            }
            ta[i] = ct[i] - ar[i] ; // turnaround time= completion time- arrival time
            wt[i] = ta[i] - bt[i] ; // waiting time= turnaround time- burst time
            avgwt += wt[i] ; // total waiting time
            avgta += ta[i] ; // total turnaround time
        }
        System.out.println("\npid arrival brust complete turn waiting");
        for(int i = 0 ; i< n; i++)
        {
            System.out.println(pid[i] + " \t " + ar[i] + "\t" + bt[i] + "\t" + ct[i] + "\t" +
            ta[i] + "\t" + wt[i] ) ;
        }
        sc.close();
        System.out.println("\naverage waiting time: "+ (avgwt/n)); // printing average waiting time.
        System.out.println("average turnaround time:"+(avgta/n)); // printing average turnaround time.
    }
}

class RR
{
    public void rr()
    {
        int num;
        Scanner s = new Scanner(System.in);
        System.out.print("Enter number of processes : ");
        num = s.nextInt();
        int wtime[],btime[],rtime[],quantum;
        wtime = new int[num];
        btime = new int[num];
        rtime = new int[num];
        for(int i=0;i<num;i++) 
        { 
            System.out.print("Enter burst time for process "+i+" : "); 
            btime[i] = s.nextInt(); 
            rtime[i] = btime[i]; 
            wtime[i]=0; 
        } 
        System.out.print("\nEnter time slice : "); 
        quantum = s.nextInt(); 
        int rp = num;
        int i=0; int time=0; 
        System.out.print("0"); 
        s.close();
        wtime[0]=0; 
        while(rp!=0) 
        { 
            if(rtime[i]>quantum)
            {
                rtime[i]=rtime[i]-quantum;
                System.out.print(" | P["+(i+1)+"] | ");
                time+=quantum;
                System.out.print(time);
            }
            else if(rtime[i]<=quantum && rtime[i]>0)
            {
                time+=rtime[i];
                rtime[i]=rtime[i]-rtime[i];
                System.out.print(" | P["+(i+1)+"] | ");
                rp--;
                System.out.print(time);
            }
            i++;
            if(i==num)
            {
                i=0;
            }
        } 
    }
}
public class FCFS_RR 
{
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        System.out.println("1.FSFS\n2.Round Robin\n");
        System.out.println("Enter choice : ");
        int ch=sc.nextInt();
        switch(ch) 
        {
            case 1:
                FCFS fobj=new FCFS();
                fobj.fsfc();
                break;
            case 2:
                 RR robj=new RR();
                robj.rr();
                break;
            default:
                System.out.println("Wrong Choice");
                break;            
        }
        sc.close();
    }
}


