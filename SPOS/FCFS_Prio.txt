8)	"Write a program to simulate CPU Scheduling Algorithms: FCFS, Priority (Non-Preemptive). 
	Process        AT                   BT
	P1             10                   2
	P2             0                    10
	P3             8                    4
	P4             5                    5
	"

FCFS(NonPremp):


package SPOSpkg;

import java.util.*;
public class FCFS_NonPremp 
{
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter no. of process: ");
		int n=sc.nextInt();
		int pid[]=new int[n];
		int at[]=new int[n];
		int bt[]=new int[n];
		int ct[]=new int[n];
		int tat[]=new int[n];
		int wt[]=new int[n];
		int temp;
		float avg_wt=0,avg_tat=0;
 
		for(int i=0; i<n; i++)
		{
			System.out.println("Enter arrival time of process " +(i+1)+ ":");
			at[i]=sc.nextInt();
			System.out.println("Enter burst time of process " +(i+1)+ ":");
			bt[i]=sc.nextInt();
			pid[i]=i+1;
		}
 
		for(int i=0 ; i<n; i++)
		{
			for(int j=0;  j< n-(i+1) ; j++)
			{
				if(at[j] > at[j+1] )
				{
					temp = at[j];
					at[j] = at[j+1];
					at[j+1] = temp;
					temp = bt[j];
					bt[j] = bt[j+1];
					bt[j+1] = temp;
					temp = pid[j];
					pid[j] = pid[j+1];
					pid[j+1] = temp;
				}
			}
		}
		
		for(int i=0 ; i<n; i++)
		{
			if( i == 0)
			{	
				ct[i]= at[i]+bt[i];
			}
			else
			{
				if( at[i]>ct[i-1])
				{
					ct[i]= at[i] +bt[i];
				}
				else
					ct[i]= ct[i-1] +bt[i];
			}
			tat[i] = ct[i] - at[i] ;
			wt[i] = tat[i] - bt[i] ;
			avg_wt += wt[i] ;
			avg_tat += tat[i] ;
		}
		
		System.out.println("Pid\tAT\tBT\tCT\tTAT\tWT\n");
		for(int i=0 ; i<n; i++)
		{
			System.out.println(pid[i] + "  \t " + at[i] + "\t" + bt[i] + "\t" + ct[i] + "\t" + tat[i] + "\t"  + wt[i] ) ;
		}
		System.out.println("\nAverage TAT (turn around time) :"+(avg_tat/n));
		System.out.println("\nAverage WT (waiting time) : "+ (avg_wt/n));
		
		sc.close();
	}
	
}


Priority (Non-Preemptive):



package SPOSpkg;

import java.util.Scanner;

public class Priority_NonPreemp
{

    int burstTime[];
    int priority[];
    int arrivalTime[];
    String[] processId;
    int numberOfProcess;

    void getProcessData(Scanner input)
    {
        System.out.print("Enter the number of Process for Scheduling: ");
        int inputNumberOfProcess = input.nextInt();
        numberOfProcess = inputNumberOfProcess;
        burstTime = new int[numberOfProcess];
        priority = new int[numberOfProcess];
        arrivalTime = new int[numberOfProcess];
        processId = new String[numberOfProcess];
        String st = "P";
        for (int i = 0; i < numberOfProcess; i++)
        {
            processId[i] = st.concat(Integer.toString(i));
            System.out.print("Enter the burst time   for Process - " +
(i) + " : ");
            burstTime[i] = input.nextInt();
            System.out.print("Enter the arrival time for Process - " +
(i) + " : ");
            arrivalTime[i] = input.nextInt();
            System.out.print("Enter the priority     for Process - " +
(i) + " : ");
            priority[i] = input.nextInt();
        }
    }

    void sortAccordingArrivalTimeAndPriority(int[] at, int[] bt, int[]
prt, String[] pid)
    {

        int temp;
        String stemp;
        for (int i = 0; i < numberOfProcess; i++)
        {

            for (int j = 0; j < numberOfProcess - i - 1; j++)
            {
                if (at[j] > at[j + 1])
                {
                    //swapping arrival time
                    temp = at[j];
                    at[j] = at[j + 1];
                    at[j + 1] = temp;

                    //swapping burst time
                    temp = bt[j];
                    bt[j] = bt[j + 1];
                    bt[j + 1] = temp;

                    //swapping priority
                    temp = prt[j];
                    prt[j] = prt[j + 1];
                    prt[j + 1] = temp;

                    //swapping process identity
                    stemp = pid[j];
                    pid[j] = pid[j + 1];
                    pid[j + 1] = stemp;

                }
                //sorting according to priority when arrival timings are same
                if (at[j] == at[j + 1])
                {
                    if (prt[j] > prt[j + 1])
                    {
                        //swapping arrival time
                        temp = at[j];
                        at[j] = at[j + 1];
                        at[j + 1] = temp;

                        //swapping burst time
                        temp = bt[j];
                        bt[j] = bt[j + 1];
                        bt[j + 1] = temp;

                        //swapping priority
                        temp = prt[j];
                        prt[j] = prt[j + 1];
                        prt[j + 1] = temp;

                        //swapping process identity
                        stemp = pid[j];
                        pid[j] = pid[j + 1];
                        pid[j + 1] = stemp;

                    }
                }
            }

        }
    }

    void priorityNonPreemptiveAlgorithm()
    {
        int finishTime[] = new int[numberOfProcess];
        int bt[] = burstTime.clone();
        int at[] = arrivalTime.clone();
        int prt[] = priority.clone();
        String pid[] = processId.clone();
        int waitingTime[] = new int[numberOfProcess];
        int turnAroundTime[] = new int[numberOfProcess];

        sortAccordingArrivalTimeAndPriority(at, bt, prt, pid);

        //calculating waiting & turn-around time for each process
        finishTime[0] = at[0] + bt[0];
        turnAroundTime[0] = finishTime[0] - at[0];
        waitingTime[0] = turnAroundTime[0] - bt[0];

        for (int i = 1; i < numberOfProcess; i++)
        {
            finishTime[i] = bt[i] + finishTime[i - 1];
            turnAroundTime[i] = finishTime[i] - at[i];
            waitingTime[i] = turnAroundTime[i] - bt[i];
        }
        float sum = 0;
        for (int n : waitingTime)
        {
            sum += n;
        }
        float averageWaitingTime = sum / numberOfProcess;

        sum = 0;
        for (int n : turnAroundTime)
        {
            sum += n;
        }
        float averageTurnAroundTime = sum / numberOfProcess;

        //print on console the order of processes along with their finish time & turn around time
        System.out.println("Priority Scheduling Algorithm : ");
        System.out.format("%20s%20s%20s%20s%20s%20s%20s\n",
"ProcessId", "BurstTime", "ArrivalTime", "Priority", "FinishTime",
"WaitingTime", "TurnAroundTime");
        for (int i = 0; i < numberOfProcess; i++) {
            System.out.format("%20s%20d%20d%20d%20d%20d%20d\n",
pid[i], bt[i], at[i], prt[i], finishTime[i], waitingTime[i],
turnAroundTime[i]);
        }

        System.out.format("%100s%20f%20f\n", "Average",
averageWaitingTime, averageTurnAroundTime);
    }

    public static void main(String[] args)
    {
        Scanner input = new Scanner(System.in);
        Priority_NonPreemp obj = new
        Priority_NonPreemp();
        obj.getProcessData(input);
        obj.priorityNonPreemptiveAlgorithm();
    }
}

